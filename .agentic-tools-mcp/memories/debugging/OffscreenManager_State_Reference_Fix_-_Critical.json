{
  "id": "0a884817-1477-41bd-b2da-5d87444cd6b5",
  "title": "OffscreenManager State Reference Fix - Critical",
  "details": "**CRITICAL INITIALIZATION BUG FIX: OffscreenManager State Reference Issue**\n\n## Problem Identified\n**Issue**: OffscreenManager failing to initialize with \"Init request failed: no device ID\" error, even though device ID was properly set in StateManager.\n\n**Root Cause**: OffscreenManager was initialized with `stateManager.getState()` (returns a copy) instead of `stateManager.getStateReference()` (returns shared reference).\n\n**Impact**: \n- Offscreen document couldn't initialize properly\n- DKG operations would fail silently\n- WebRTC operations would fail to start\n- Extension appeared to work but critical functionality was broken\n\n## Sequence of Events\n1. Background script initializes components\n2. OffscreenManager gets snapshot of initial state (deviceId: '')\n3. WebSocket manager connects and updates state with deviceId: 'mpc-2'\n4. OffscreenManager still has stale copy with empty deviceId\n5. Offscreen document requests init → OffscreenManager rejects (no device ID)\n\n## Fix Applied\n**File**: `/src/entrypoints/background/index.ts`\n**Change**: \n```typescript\n// BEFORE (BROKEN):\noffscreenManager = new OffscreenManager(stateManager.getState());\n\n// AFTER (FIXED):\noffscreenManager = new OffscreenManager(stateManager.getStateReference());\n```\n\n## Verification\n- ✅ Build successful\n- ✅ No TypeScript errors\n- ✅ Consistent with SessionManager and WebSocketManager patterns\n\n## Pattern Established\n**Rule**: All managers that need to track state changes must use `getStateReference()`, not `getState()`:\n- ✅ SessionManager: Uses `getStateReference()` \n- ✅ WebSocketManager: Uses `getStateReference()`\n- ✅ OffscreenManager: Now uses `getStateReference()` (FIXED)\n\nThis ensures all components share the same state object and see real-time updates.",
  "category": "debugging",
  "dateCreated": "2025-06-15T12:12:39.133Z",
  "dateUpdated": "2025-06-15T12:12:39.133Z"
}