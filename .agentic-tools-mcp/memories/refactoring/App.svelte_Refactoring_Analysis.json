{
  "id": "beaf0cb2-b5eb-417c-a29c-9632e5e40df8",
  "title": "App.svelte Refactoring Analysis",
  "details": "## App.svelte Refactoring Analysis\n\n### Current Issues:\n1. **File Size**: 1101 lines - too large for maintainability\n2. **Mixed Concerns**: UI logic, state management, business logic all in one file\n3. **Repetitive Code**: Multiple similar reactive statements and message handlers\n4. **Complex State Management**: Large reactive blocks and complex message routing\n\n### Refactoring Plan:\n\n#### 1. Extract Components:\n- **NetworkStatus.svelte**: WebSocket status, peer ID, connection status\n- **DeviceList.svelte**: Connected devices with WebRTC status and test messaging\n- **SessionManager.svelte**: MPC session creation, invitation handling, active session display\n- **AddressDisplay.svelte**: DKG address display component\n- **WalletStatus.svelte**: Network status banner, DKG status\n\n#### 2. Extract Logic:\n- **messageHandler.ts**: Centralize background message handling logic\n- **sessionActions.ts**: Session proposal, acceptance, and management functions\n- **uiState.ts**: UI state persistence and loading logic\n\n#### 3. Component Hierarchy:\n```\nApp.svelte (main container)\n├── Settings.svelte (existing)\n├── WalletStatus.svelte (new)\n├── AddressDisplay.svelte (new)\n├── NetworkStatus.svelte (new)\n├── DeviceList.svelte (new)\n└── SessionManager.svelte (new)\n```\n\n#### 4. State Management:\n- Keep main `appState` in App.svelte\n- Pass state down as props\n- Emit events up from child components\n- Maintain localStorage for UI preferences only\n\n### Architectural Benefits:\n- **Single Responsibility**: Each component has one clear purpose\n- **Reusability**: Components can be reused or tested independently\n- **Maintainability**: Smaller files easier to understand and modify\n- **Consistency**: Follows established project patterns from WebRTC refactoring",
  "category": "refactoring",
  "dateCreated": "2025-06-16T05:32:21.603Z",
  "dateUpdated": "2025-06-16T05:32:21.603Z"
}