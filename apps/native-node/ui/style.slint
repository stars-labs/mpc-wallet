// Modern Dark Theme Style Constants
export global Theme {
    // Background colors
    out property <color> bg-primary: #1a1f2e;
    out property <color> bg-secondary: #242937;
    out property <color> bg-tertiary: #2d3548;
    out property <color> bg-hover: #323a4f;
    
    // Text colors
    out property <color> text-primary: #e4e7f1;
    out property <color> text-secondary: #a3abc2;
    out property <color> text-muted: #6b7280;
    
    // Accent colors
    out property <color> accent-primary: #4a9eff;
    out property <color> accent-primary-hover: #3b8fee;
    out property <color> accent-success: #4ade80;
    out property <color> accent-warning: #fbbf24;
    out property <color> accent-error: #ef4444;
    
    // Border and shadow
    out property <color> border-color: #3a4052;
    out property <color> shadow-color: rgba(0, 0, 0, 0.3);
    
    // Spacing
    out property <length> spacing-xs: 4px;
    out property <length> spacing-sm: 8px;
    out property <length> spacing-md: 16px;
    out property <length> spacing-lg: 24px;
    out property <length> spacing-xl: 32px;
    
    // Border radius
    out property <length> radius-sm: 6px;
    out property <length> radius-md: 8px;
    out property <length> radius-lg: 12px;
    out property <length> radius-xl: 16px;
    out property <length> radius-full: 999px;
    
    // Font sizes
    out property <length> font-xs: 12px;
    out property <length> font-sm: 13px;
    out property <length> font-md: 14px;
    out property <length> font-lg: 16px;
    out property <length> font-xl: 18px;
    out property <length> font-2xl: 24px;
    out property <length> font-3xl: 32px;
}

// Reusable Components
export component Card inherits Rectangle {
    in property <string> title;
    in property <bool> show-header: true;
    
    background: Theme.bg-secondary;
    border-radius: Theme.radius-lg;
    drop-shadow-blur: 10px;
    drop-shadow-color: Theme.shadow-color;
    
    VerticalBox {
        padding: Theme.spacing-lg;
        spacing: Theme.spacing-md;
        
        if show-header : VerticalBox {
            spacing: Theme.spacing-md;
            
            Text {
                text: root.title;
                font-size: Theme.font-xl;
                font-weight: 600;
                color: Theme.text-primary;
            }
            
            Rectangle {
                height: 1px;
                background: Theme.border-color;
            }
        }
        
        @children
    }
}

export component StatusBadge inherits Rectangle {
    in property <bool> connected: false;
    in property <string> connected-text: "Connected";
    in property <string> disconnected-text: "Disconnected";
    
    width: 200px;
    height: 40px;
    background: connected ? rgba(74, 222, 128, 0.1) : rgba(239, 68, 68, 0.1);
    border-radius: Theme.radius-full;
    border-width: 1px;
    border-color: connected ? Theme.accent-success : Theme.accent-error;
    
    HorizontalBox {
        padding-left: Theme.spacing-md;
        padding-right: Theme.spacing-md;
        alignment: center;
        spacing: Theme.spacing-sm;
        
        Rectangle {
            width: 8px;
            height: 8px;
            border-radius: 4px;
            background: connected ? Theme.accent-success : Theme.accent-error;
            
            animate background {
                duration: 300ms;
                easing: ease-in-out;
            }
        }
        
        Text {
            text: connected ? connected-text : disconnected-text;
            color: connected ? Theme.accent-success : Theme.accent-error;
            font-size: Theme.font-md;
            font-weight: 500;
        }
    }
}

export component PrimaryButton inherits Rectangle {
    in property <string> text;
    in property <bool> enabled: true;
    callback clicked;
    
    height: 44px;
    background: enabled ? Theme.accent-primary : Theme.bg-tertiary;
    border-radius: Theme.radius-md;
    
    property <bool> pressed: false;
    property <bool> hovered: false;
    
    animate background {
        duration: 150ms;
        easing: ease-in-out;
    }
    
    TouchArea {
        width: 100%;
        height: 100%;
        
        pointer-event(event) => {
            if (event.button == PointerEventButton.left && event.kind == PointerEventKind.down) {
                pressed = true;
            } else if (event.kind == PointerEventKind.up) {
                if (pressed && enabled) {
                    clicked();
                }
                pressed = false;
            }
        }
        
        mouse-cursor: enabled ? pointer : default;
    }
    
    states [
        pressed when pressed && enabled : {
            background: Theme.accent-primary-hover;
        }
        hovered when hovered && enabled : {
            background: Theme.accent-primary-hover;
        }
    ]
    
    Text {
        text: root.text;
        font-size: Theme.font-md;
        font-weight: 500;
        color: enabled ? white : Theme.text-secondary;
        horizontal-alignment: center;
        vertical-alignment: center;
    }
}