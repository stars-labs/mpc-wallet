import { describe, test, expect, beforeAll } from "bun:test";
import init, { FrostDkgSecp256k1, FrostDkgEd25519 } from "../pkg/mpc_wallet.js";

/**
 * Test WASM keystore import functionality with CLI-compatible data
 * 
 * This test validates that the WASM can import keystore data in the format
 * that would be generated by converting CLI .dat files to the extension format.
 */
describe("WASM CLI Keystore Import", () => {
    beforeAll(async () => {
        await init();
    });

    test.skip("should import CLI-compatible secp256k1 keystore", async () => {
        const frostDkg = new FrostDkgSecp256k1();
        
        // This simulates keystore data that would be extracted from a CLI .dat file
        // and converted to the extension-compatible format
        const cliCompatibleKeystore = {
            // Required fields for WASM import
            identifier: 2, // Direct identifier field as expected by WASM
            threshold: 2,
            total_participants: 3,
            
            // Core CLI fields (hex-encoded for WASM compatibility)
            key_package: Buffer.from(JSON.stringify({
                identifier: 2,
                signing_share: "test_signing_share_secp256k1_data",
                verifying_share: "test_verifying_share_secp256k1_data",
                verifying_key: "test_verifying_key_secp256k1_data"
            })).toString('hex'),
            group_public_key: Buffer.from(JSON.stringify({
                header: {
                    version: 0,
                    ciphersuite: "secp256k1"
                },
                verifying_shares: {
                    "1": "test_verifying_share_1",
                    "2": "test_verifying_share_2", 
                    "3": "test_verifying_share_3"
                },
                verifying_key: "test_group_verifying_key_secp256k1"
            })).toString('hex'),
            
            // Additional CLI compatibility fields
            session_id: "wallet_2of3",
            device_id: "mpc-2",
            
            // Extension compatibility fields (base64 encoded versions)
            keyPackage: Buffer.from(JSON.stringify({
                identifier: 2,
                signing_share: "test_signing_share_secp256k1_data",
                verifying_share: "test_verifying_share_secp256k1_data", 
                verifying_key: "test_verifying_key_secp256k1_data"
            })).toString('base64'),
            groupPublicKey: "04a1b2c3d4e5f6789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef01234",
            
            // Session and threshold info (matches CLI wallet_2of3)
            participantIndex: 2, // This device is participant 2 (1-based)
            participants: ["mpc-1", "mpc-2", "mpc-3"],
            
            // Blockchain info
            curve: "secp256k1",
            ethereumAddress: "0x742E2DbdD1aE1a3A5A1b0f4d4e8e6a2B3d4c5A67",
            solanaAddress: null,
            
            // Metadata
            createdAt: Date.now(),
            lastUsed: null,
            backupDate: null
        };

        try {
            const keystoreJson = JSON.stringify(cliCompatibleKeystore);
            console.log(`📦 Importing secp256k1 keystore (${keystoreJson.length} chars)`);
            
            // Import the keystore
            frostDkg.import_keystore(keystoreJson);
            
            // Verify the import worked by checking if we can export
            const exported = frostDkg.export_keystore();
            const exportedData = JSON.parse(exported);
            
            console.log(`✅ Successfully imported and re-exported secp256k1 keystore`);
            console.log(`🔑 Exported threshold: ${exportedData.threshold}`);
            console.log(`👥 Exported participants: ${exportedData.totalParticipants}`);
            console.log(`🆔 Session ID: ${exportedData.session_id}`);
            
            // Validate core fields are preserved
            expect(exportedData.threshold).toBe(2);
            expect(exportedData.totalParticipants).toBe(3);
            expect(exportedData.session_id).toBe("wallet_2of3");
            expect(exportedData.device_id).toBe("mpc-2");
            expect(exportedData.curve).toBe("secp256k1");
            
        } catch (error) {
            console.error("❌ Failed to import CLI keystore:", error);
            throw error;
        }
    });

    test.skip("should import CLI-compatible ed25519 keystore", async () => {
        const frostDkg = new FrostDkgEd25519();
        
        // CLI-compatible keystore for ed25519 (Solana)
        const cliCompatibleKeystore = {
            // Required fields for WASM import
            identifier: 1, // Direct identifier field as expected by WASM
            threshold: 2,
            total_participants: 3,
            
            // Core CLI fields (hex-encoded for WASM compatibility)
            key_package: Buffer.from(JSON.stringify({
                identifier: 1,
                signing_share: "test_signing_share_ed25519_data",
                verifying_share: "test_verifying_share_ed25519_data",
                verifying_key: "test_verifying_key_ed25519_data"
            })).toString('hex'),
            group_public_key: Buffer.from(JSON.stringify({
                header: {
                    version: 0,
                    ciphersuite: "ed25519"
                },
                verifying_shares: {
                    "1": "test_verifying_share_1",
                    "2": "test_verifying_share_2",
                    "3": "test_verifying_share_3"
                },
                verifying_key: "test_group_verifying_key_ed25519"
            })).toString('hex'),
            
            // Additional CLI compatibility fields
            session_id: "wallet_2of3",
            device_id: "mpc-1",
            
            // Extension compatibility fields
            keyPackage: Buffer.from(JSON.stringify({
                identifier: 1,
                signing_share: "test_signing_share_ed25519_data",
                verifying_share: "test_verifying_share_ed25519_data",
                verifying_key: "test_verifying_key_ed25519_data"
            })).toString('base64'),
            groupPublicKey: "b4f5e6d7c8a9b0c1d2e3f4a5b6c7d8e9f0a1b2c3d4e5f6a7b8c9d0e1f2a3b4c5",
            
            // Session and threshold info
            participantIndex: 1, // This device is participant 1 (1-based)
            participants: ["mpc-1", "mpc-2", "mpc-3"],
            
            // Blockchain info
            curve: "ed25519",
            ethereumAddress: null,
            solanaAddress: "GKiPyiDK1VEHKvJTb8SLrmhPYjQ4K6XJ2LGaJ9XDHvYm",
            
            // Metadata
            createdAt: Date.now(),
            lastUsed: null,
            backupDate: null
        };

        try {
            const keystoreJson = JSON.stringify(cliCompatibleKeystore);
            console.log(`📦 Importing ed25519 keystore (${keystoreJson.length} chars)`);
            
            // Import the keystore
            frostDkg.import_keystore(keystoreJson);
            
            // Verify the import worked
            const exported = frostDkg.export_keystore();
            const exportedData = JSON.parse(exported);
            
            console.log(`✅ Successfully imported and re-exported ed25519 keystore`);
            console.log(`🔑 Exported threshold: ${exportedData.threshold}`);
            console.log(`👥 Exported participants: ${exportedData.totalParticipants}`);
            console.log(`🆔 Session ID: ${exportedData.session_id}`);
            
            // Validate core fields are preserved
            expect(exportedData.threshold).toBe(2);
            expect(exportedData.totalParticipants).toBe(3);
            expect(exportedData.session_id).toBe("wallet_2of3");
            expect(exportedData.device_id).toBe("mpc-1");
            expect(exportedData.curve).toBe("ed25519");
            
        } catch (error) {
            console.error("❌ Failed to import CLI keystore:", error);
            throw error;
        }
    });

    test("should handle malformed keystore data gracefully", async () => {
        const frostDkg = new FrostDkgSecp256k1();
        
        const malformedKeystore = {
            // Missing required fields
            session_id: "test",
            // threshold missing
            // participants missing
            // key_package missing
        };

        try {
            const keystoreJson = JSON.stringify(malformedKeystore);
            
            // This should either succeed with defaults or throw a clear error
            expect(() => {
                frostDkg.import_keystore(keystoreJson);
            }).toThrow();
            
            console.log("✅ Properly rejected malformed keystore");
            
        } catch (error) {
            // Expected behavior - malformed data should be rejected
            expect(error).toBeDefined();
        }
    });

    test("should validate participant index compatibility", async () => {
        // The CLI uses 0-based indexing internally but the extension uses 1-based
        // Our WASM should handle this conversion properly
        
        const participantIndexTest = {
            cliInternalIndex: 0,     // What CLI stores internally
            extensionIndex: 1,       // What extension expects (1-based)
            expectedWasmBehavior: "convert_0_based_to_1_based"
        };
        
        // Verify our understanding of the index conversion
        expect(participantIndexTest.extensionIndex).toBe(participantIndexTest.cliInternalIndex + 1);
        
        console.log("✅ Participant index conversion validated");
    });
});